{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10940\viewh14060\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Oppgave a)\
Med en konstrukt\'f8r kan man ha mer kompleks initialisering av variabler, som kan ha validering.\
Man kan s\'f8rge for korrekt tilstand og god innkapsling ved \'e5 sette korrekt tilstand ved opprettelse av objektet.\
\
Oppgave b)\
Lar brukeren sette visse variabler avhengig av \'f8nsker. Argumentene den tar inn er n\'f8dvendig for \'e5 s\'f8rge for at objektet har en gyldig tilstand fra opprettelse, og er n\'f8dvendig der det ikke finnes noen fornuftig default-verdi. Gjelder som regel felt som ikke kan v\'e6re ikke-initialisert.\
\
Oppgave c)\
Public hvis ethvert annet objekt skal kunne opprette nye instanser av klassen. Kallet til konstrukt\'f8ren gj\'f8res i en vilk\'e5rlig klasse og ser slik ut: new <klassenavn>(<argumenter>);.\
\
Protected om kun klasser som arver fra klassen skal kunne bruke konstrukt\'f8ren. I dette tilfellet gj\'f8res kallet inne i konstrukt\'f8ren til subklassen, og er kun n\'f8dvendig om superklassen trenger argumenter i sin konstrukt\'f8r, og ser is\'e5fall slik ut: super(<argumenter<);.\
\
Private om man \'f8nsker \'e5 manuelt lage en Enum-klasse, som har som form\'e5l \'e5 holde en h\'e5ndfull gyldige, og forh\'e5ndsdefinerte, verdier. I dette tilfellet kalles konstrukt\'f8ren inne i klassen selv, og vil gjerne lagres i variabler som er b\'e5de final og static, slik at det ikke kan endres.\
\
\
Oppgave d)\
2, 0, 1\
\
\
Oppgave e)\
Forutsetningene for at en konstrukt\'f8r automatisk skal opprettes er at klassen er instansierbar, alts\'e5 at klassen ikke er abstrakt, samt at det ikke er definert noen andre konstrukt\'f8rer. En slik konstrukt\'f8r vil v\'e6re public og ha en tom parameterliste.\
\
\
public interface Words \{\
	boolean containsWord(String word);\
	Collection<String> getWordsStartingWith(String prefix);\
	boolean addWord(String word);\
	boolean removeWord(String word);\
\}\
 \
\
public class WordList implements Words \{\
\
	private Collection<String> words = new ArrayList<>();\
\
	@Override\
	public boolean containsWord(String word) \{\
		return words.contains(word);\
	\}\
\
	@Override\
	public Collection<String> getWordsStartingWith(String prefix) \{\
		return words.stream().filter(w -> w.startsWith(prefix)).collect(Collectors.toList());\
	\}\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 	@Override\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 	public boolean addWord(String word) \{\
		word = word.trim();\
		return !word.isEmpty() && !containsWord(word) ? words.add(word) : false;\
	\}\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 	@Override\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 	public boolean removeWord(String word) \{\
		return words.remove(word);\
	\}\
	\
	public boolean removeWordsStartingWith(String prefix) \{\
		return words.removeAll(getWordsStartingWith(prefix));\
	\}\
\
	public String getPrefix(String s, String suffix) \{\
		int i = s.lastIndexOf(suffix);\
		return i >= 0 ? s.substring(0, i) : null;\
	\}\
\
	public boolean hasSuffixes(String pre, List<String> suff) \{\
		return suff.stream().allMatch(s -> containsWord(pre + s));\
	\}\
\
	public List<String> findPrefixes(List<String> suff) \{\
		return words.stream().map(s -> getPrefix(s, suff.get(0))).filter(s -> s != null)\
				.filter(s -> hasSuffixes(s, suff)).collect(Collectors.toList());\
	\}\
\
	private int checkForHash(String s) \{\
		for (int i = 0; i < s.length(); i ++) \{\
			if (s.charAt(i) == \'91#\'92) \{\
				return i;\
			\}\
		\}\
		return s.length();\
	\}\
\
	public void read(InputStream in) throws Exception \{\
		Scanner sc = new Scanner(in);\
		while (sc.hasNextLine()) \{\
			String line = sc.nextLine();\
			line = line.substring(checkForHash(line)).trim();\
			if (line.indexOf(\'ab-\'bb) >= 0) \{\
				String prefix = line.split(\'ab-\'ab)[0].trim();\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 				String[] suffixes = line.split(\'ab-\'ab)[0].split(\'ab,\'bb);\
				for (String s : suffixes) \{\
					addWord(prefix + s.trim());\
				\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 			\} else \{\
				addWord(line);\
			\}\
			\
		\}\
		sc.close();			\
	\}\
\
\}\
\
\
public class DelegatingWordList implements Words \{\
\
	private Words words1, words2;\
\
	DelegatingWordList(Words words1, Words words2) \{\
		this.words1 = words1;\
		this.words2 = words2;\
	\}\
\
	@Override\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 	public boolean containsWord(String word) \{\
		return words1.containsWord(word) || words2.containsWord(word);\
	\}\
\
	@Override\
	public Collection<String> getWordsStartingWith(String prefix) \{\
		Collection<String> result = new ArrayList<>();\
		result.addAll(words1.getWordsStartingWith(prefix);\
		result.addAll(words2.getWordsStartingWith(prefix);\
		return result;\
	\}\
\
	@Override\
	public boolean addWord(String word) \{\
		return ! containsWord(word) ? word1.addWord(word) : false;\
	\}\
\
	@Override\
	public boolean removeWord(String word) \{\
		return words1.remove(word) | words2.remove(word);\
	\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
\}\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}