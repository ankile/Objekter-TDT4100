{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10300\viewh14060\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Oppgave a)\
S\'f8rge for at ytre objekter ikke kan sette den indre tilstanden til noe ulovlig.\
\
Oppgave b)\
\
public class Person \{\
	\
	private Gender gender;\
	private Date date;\
	\
\
	Person(Gender gender) \{\
		this.gender = gender;\
	\}\
\
	public setDate(Date date) \{\
		this.date = date\
	\}\
\
	public char getGender() \{\
		return gender;\
	\}\
\
	public Date getDate() \{\
		return date;\
	\}\
	\
\}\
\
\
public class Gender \{\
\
	private char gender;\
\
	private Gender(char gender) \{\
		this.gender = gender;\
	\}\
\
	public char getChar() \{\
		return gender;\
	\}\
\
	public static Gender valueOf(char c) \{\
		return c == 'm' ? M : (c == 'f' ? F : null);\
	\}\
	\
	public String toString() \{\
		return "Gender " + (gender == 'm' ? "male" : "female");\
	\}\
\
	public static Gender\
			M = new Gender('m'),\
			F = new Gender('f');	\
\}\
\
\
public class MatchResult \{\
\
	private final String home, away;\
	private int homeGoals = 0, awayGoals = 0;\
\
	MatchResult(String home, String away, int homeGoals, int awayGoals) \{\
		this.home = home\
		\'85\
	\}\
\
	public boolean isParticipant(String team) \{\
		return team.equals(home) || team.equals(away);\
	\}\
\
	public String getTeam1() \{\
		return home;\
	\}\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 	public String getTeam2() \{\
		return away;\
	\}	\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
	public boolean isDraw() \{\
		return homeGoals == awayGoals;\
	\}\
\
	public boolean isWinner(String team) \{\
		if (! isParticipant(team)) \{\
			throw new IllegalArgumentException(\'abGiven team did not play\'bb);\
		\}\
		return homeGoals > awayGoals && team.equals(home) ||\'a0awayGoals > homeGoals && team.equals(away);\
	\}\
\
	public void addPoints(String team, int points) \{\
		team.equals(home) ? homeGoals += points : team.equals(away) ? awayGoals += 1 : 0\
	\}\
\
\}\
\
\
public class LeagueTable \{\
\
	private final List<String> teams;\
	private List<MatchResult> results;\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 	private List<LeagueTableRow> league;\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
	LeagueTable(String\'85teams) \{\
		teams = new ArrayList<>(Arrays.asList(teams));\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 		results = new ArrayList<>();\
		league = new ArrayList<>();\
		for (String team : teams) \{\
			league.add(new LeagueTableRow(team);\
		\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 	\}\
\
	public void addResult(MatchResult result) \{\
		if (! teams.contains(result.getTeam1()) ||\'a0! teams.contains(result.getTeam2()) \{\
			throw new IllegalArgumentException(\'abTeam not in league\'bb);\
		\}\
		results.add(result);\
		updateLeague(result);\
	\}\
\
	private void updateLeague(MatchResult result) \{\
		addPoints(getTeamPoints(result, result.getTeam1());\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 		addPoints(getTeamPoints(result, result.getTeam2());\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 		Collections.sort(league);\
	\}\
\
	private void addPoints(String team, int i) \{\
		for (LeagueTableRow row : league) \{\
			if (team.equals(row.getName()) \{\
				row.addPoints(i);\
				return;\
			\}\
		\}\
	\}\
\
	public int getTeamPoints(MatchResult result, String team) \{\
		if (! result.isParticipant(team)) \{\
			throw new IllegalArgumentException(\'abTeam not in this result\'bb);\
		\}\
\
		return result.isWinner(team) ? 3 : result.isDraw() ? 1 : 0;\
	\}\
\}\
\
\
public class LeagueTableRow implements Comparable<LeagueTableRow> \{\
	\
	private final String name;\
	private int points;\
\
	LeagueTableRow(String name) \{\
		this.name = name;\
		points = 0;\
	\}\
	\
	@Override\
	public int compareTo(LeagueTableRow other) \{\
		return other.points - points;\
	\}\
\
	public int getPoints() \{\
		return points;\
	\}\
\
	public String getName() \{\
		return name;\
	\}\
\
	public void addPoints(int i) \{\
		points += i;\
	\}\
\
\}\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}